name: Release

on:
  push:
    tags:
      - "*"

env:
  # update with the name of the main binary
  BINARY_NAME: game-experiments
  ITCH_TARGET: djiit/game-experiments
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

jobs:
  # Build for wasm
  release-wasm:
    runs-on: ubuntu-latest
    steps:
      - uses: olegtarasov/get-tag@v2.1.2
        id: get_version
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.7.0
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: Install Trunk
        run: wget -qO- https://github.com/thedodd/trunk/releases/download/v0.17.5/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-
      - name: Build
        run: ./trunk build --public-url=/game-experiments
      - name: Package as a zip
        working-directory: ./dist
        run: |
          zip --recurse-paths ../${{ env.BINARY_NAME }}.zip .
      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.BINARY_NAME }}.zip
          name: wasm
          retention-days: 1
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.BINARY_NAME }}.zip
          asset_name: ${{ env.BINARY_NAME }}-wasm-${{ steps.get_version.outputs.tag }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  # Build for Linux
  release-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: olegtarasov/get-tag@v2.1.2
        id: get_version
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.7.0
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.3  
      - name: install dependencies
        run: |
          sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Build
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu

      - name: Prepare package
        run: |
          mkdir linux
          cp target/x86_64-unknown-linux-gnu/release/${{ env.BINARY_NAME }} linux/
          cp -r assets linux/

      - name: Package as a zip
        working-directory: ./linux
        run: |
          zip --recurse-paths ../${{ env.BINARY_NAME }}.zip .

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.BINARY_NAME }}.zip
          name: linux
          retention-days: 1
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.BINARY_NAME }}.zip
          asset_name: ${{ env.BINARY_NAME }}-linux-${{ steps.get_version.outputs.tag }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  # Build for Windows
  release-windows:
    runs-on: windows-latest
    steps:
      - uses: olegtarasov/get-tag@v2.1.2
        id: get_version
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.7.0
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: Build
        run: |
          cargo build --release --target x86_64-pc-windows-msvc
      - name: Prepare package
        run: |
          mkdir windows
          cp target/x86_64-pc-windows-msvc/release/${{ env.BINARY_NAME }}.exe windows/
          cp -r assets windows/
      - name: Package as a zip
        run: |
          Compress-Archive -Path windows/* -DestinationPath ${{ env.BINARY_NAME }}.zip
      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.BINARY_NAME }}.zip
          name: windows
          retention-days: 1
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.BINARY_NAME }}.zip
          asset_name: ${{ env.BINARY_NAME }}-windows-${{ steps.get_version.outputs.tag }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  # Build for MacOS x86_64
  release-macOS-intel:
    runs-on: macOS-latest

    steps:
      - uses: olegtarasov/get-tag@v2.1.2
        id: get_version
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin
      - name: Environment Setup
        run: |
          export CFLAGS="-fno-stack-check"
          export MACOSX_DEPLOYMENT_TARGET="10.9"

      - name: Build
        run: |
          cargo build --release --target x86_64-apple-darwin

      - name: Prepare Package
        run: |
          mkdir -p ${{ env.BINARY_NAME }}.app/Contents/MacOS
          cp target/x86_64-apple-darwin/release/${{ env.BINARY_NAME }} ${{ env.BINARY_NAME }}.app/Contents/MacOS/
          cp -r assets ${{ env.BINARY_NAME }}.app/Contents/MacOS/
          hdiutil create -fs HFS+ -volname "${{ env.BINARY_NAME }}" -srcfolder ${{ env.BINARY_NAME }}.app ${{ env.BINARY_NAME }}-macOS-intel.dmg

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.BINARY_NAME }}-macOS-intel.dmg
          name: macOS-intel
          retention-days: 1

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.BINARY_NAME }}-macOS-intel.dmg
          asset_name: ${{ env.BINARY_NAME }}-macOS-intel-${{ steps.get_version.outputs.tag }}.dmg
          tag: ${{ github.ref }}
          overwrite: true

  # Build for MacOS Apple Silicon
  release-macOS-apple-silicon:
    runs-on: macOS-latest

    steps:
      - uses: olegtarasov/get-tag@v2.1.2
        id: get_version
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin
      - name: Environment
        # macOS 11 was the first version to support ARM
        run: |
          export MACOSX_DEPLOYMENT_TARGET="11"

      - name: Build
        run: |
          cargo build --release --target aarch64-apple-darwin

      - name: Prepare Package
        run: |
          mkdir -p ${{ env.BINARY_NAME }}.app/Contents/MacOS
          cp target/aarch64-apple-darwin/release/${{ env.BINARY_NAME }} ${{ env.BINARY_NAME }}.app/Contents/MacOS/
          cp -r assets ${{ env.BINARY_NAME }}.app/Contents/MacOS/
          hdiutil create -fs HFS+ -volname "${{ env.BINARY_NAME }}-macOS-apple-silicon" -srcfolder ${{ env.BINARY_NAME }}.app ${{ env.BINARY_NAME }}-macOS-apple-silicon.dmg

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.BINARY_NAME }}-macOS-apple-silicon.dmg
          name: macOS-apple-silicon
          retention-days: 1

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.BINARY_NAME }}-macOS-apple-silicon.dmg
          asset_name: ${{ env.BINARY_NAME }}-macOS-apple-silicon-${{ steps.get_version.outputs.tag }}.dmg
          tag: ${{ github.ref }}
          overwrite: true

  check-if-upload-to-itch-is-configured:
    runs-on: ubuntu-latest
    outputs:
      should-upload: ${{ steps.check-env.outputs.has-itch-target }}
    steps:
      - id: check-env
        run: |
          if [[ -z "$ITCH_TARGET" ]]; then
            echo "has-itch-target=no" >> $GITHUB_OUTPUT
          else
            echo "has-itch-target=yes" >> $GITHUB_OUTPUT
          fi

  upload-to-itch:
    runs-on: ubuntu-latest
    needs:
      - check-if-upload-to-itch-is-configured
      - release-wasm
      - release-linux
      - release-windows
      - release-macOS-intel
      - release-macOS-apple-silicon
    if: ${{ needs.check-if-upload-to-itch-is-configured.outputs.should-upload == 'yes' }}

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./builds
      - name: Install butler
        run: |
          curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
          unzip butler.zip
          chmod +x butler
          ./butler -V
      - uses: olegtarasov/get-tag@v2.1.2
        id: get_version
      - name: Upload to itch.io
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
        run: |
          for channel in $(ls builds); do
            ./butler push \
                --fix-permissions \
                --userversion="${{ steps.get_version.outputs.tag }}" \
                builds/$channel/* \
                ${{ env.ITCH_TARGET }}:$channel
          done
